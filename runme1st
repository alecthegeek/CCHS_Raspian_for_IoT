#!/usr/bin/env bash
# Copyright (c) 2013 All Right Reserved  Alec Clews
#
# author: Alec Clews
# alecclews@gmail.com
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License along
#    with this program; if not, write to the Free Software Foundation, Inc.,
#    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
#
# NB These Scripts support Pi Raspian (Debian)


export UPDATE_LABEL="Updated_$(date +%F)"
export LOG_FILE="/home/$USER/$UPDATE_LABEL.log"
function eLog { # Echo & log input
  echo "$1" | tee -a $LOG_FILE 2>&1
}
function execLog { # Execute & log output
  $@ | tee -a $LOG_FILE 2>&1
}

eLog "CCHS update script: runme1st"
eLog "Logging to: $LOG_FILE"
setConfigOption() {
  CONFIG_FILE=/boot/config.txt
  if grep "$1=" $CONFIG_FILE ; then
    sudo sed --in-place -re "s/^#?$1=.+$/$1=$2 #$UPDATE_LABEL/" $CONFIG_FILE
  else
    echo $1=$2'  #'$UPDATE_LABEL| sudo tee -a $CONFIG_FILE
  fi
}
eLog "Using config file: $CONFIG_FILE"

export -f setConfigOption

setOverclock() {


  clockSettings=( "None ARM:700MHz core:250MHz SDRAM:400MHz overvolt:0" \
    "Modest ARM:800MHz core:250MHz SDRAM:400MHz overvolt:0" \
    "Medium ARM:900MHz core:250MHz SDRAM:450MHz overvolt:2" \
    "High ARM:950MHz core:250MHz SDRAM:450MHz overvolt:6" \
    # "Turbo ARM:1000MHz core:500MHz SDRAM:600MHz overvolt:6"
     )

  eLog ""

#CLOCKSETTINGS=$(echo --title "Over Clocking" --menu "Please select your clock settings from the following list. NB Turbo is NOT recommended " \
#              $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Back --ok-button Select \
#              $(for ((i=0; i < $(("${clockSettings[@]}"/2));i++)) ; do echo \"${clockSettings[0]:$((i*2)):2}\" ; done) \
#        3>&1 1>&2 2>&3)

  select c in "${clockSettings[@]}"; do
    echo "$c" |
    sed -re 's/^.+ARM:([0-9]+)MHz core:([0-9]+)MHz SDRAM:([0-9]+)MHz overvolt:([0-9]+)$/arm_freq \1 core_freq \2 sdram_freq \3 over_voltage \4/' |
    xargs --no-run-if-empty -n 2 bash -c 'setConfigOption "$@"' {}
    break
  done < /dev/tty
  eLog "Clock Settings: $c"

}

splitMemory() {
  REPLY=0
  eLog "N.B. For Minecraft 64Mb of Video Memory is recommended"
  while [[ ! $REPLY =~ (16|32|64|128|256) ]] ; do
    read -p  "How much video memory do you want? (16|32|64|128|256) " -r < /dev/tty
  done

  setConfigOption gpu_mem $REPLY
  eLog "Video Memory: $REPLY"
}


calc_wt_size() {
  # NOTE: it's tempting to redirect stderr to /dev/null, so supress error
  # output from tput. However in this case, tput detects neither stdout or
  # stderr is a tty and so only gives default 80, 24 values
  WT_HEIGHT=17
  WT_WIDTH=$(tput cols)

  if [ -z "$WT_WIDTH" ] || [ "$WT_WIDTH" -lt 60 ]; then
    WT_WIDTH=80
  fi
  if [ "$WT_WIDTH" -gt 178 ]; then
    WT_WIDTH=120
  fi
  WT_MENU_HEIGHT=$(($WT_HEIGHT-8))
  eLog "Wt Size: $WT_WIDTH x $WT_HEIGHT"
}

calc_wt_size


do_wifi() {
# Written by @mikerr and stolen by @alecthegeek, see https://github.com/mikerr/raspi-config
eLog "__ Wifi ___________________________________________________________"
wifidevice=wlan0
WPAFILE=/etc/wpa_supplicant/wpa_supplicant.conf

{
iwlist $wifidevice scan | grep 'ESSID' | sed -e 's/.*ESSID:"\([^"]\+\)".*/  \1/' > /tmp/ap_list.txt 
} | whiptail --gauge "Scanning Wifi, please wait" 5 50 10

echo "whiptail --title \"Choose SSID, or enter manually\" \\" > /tmp/choose_ap.sh
echo "--radiolist \"Choose SSID\" \\" >> /tmp/choose_ap.sh

LINES=`wc -l < /tmp/ap_list.txt`
LINES=$((${LINES}+1))
echo "10 60 ${LINES} \\" >> /tmp/choose_ap.sh
for LINE in `cat /tmp/ap_list.txt`
    do
    echo "$LINE '' off \\" >> /tmp/choose_ap.sh
    done
echo "Enter\ manually '' on 2>/tmp/ssid.ans" >>/tmp/choose_ap.sh

chmod 777 /tmp/choose_ap.sh
. /tmp/choose_ap.sh
      
if [ $? -ne 0 ]; then return 0; fi

SSID=`cat /tmp/ssid.ans`
if [ "$SSID" = "Enter manually" ]; then
      SSID=$(whiptail --inputbox "SSID Name" 20 70 3>&1 1>&2 2>&3)
    if [ -z $SSID ]; then return 0 ; fi
fi

ENCRYPTION=$(whiptail --title "Encryption" --menu "Encryption for network: $SSID " $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Back --ok-button Select \
          "1" "WPA/WPA2" \
          "2" "WEP (hex)" \
          "3" "WEP (ascii)" \
          "4" "None" \
        3>&1 1>&2 2>&3)

if [ $? -ne 0 ]; then return 0; fi

WPANEW=/tmp/wpanew.conf
WPATMP=/tmp/wpa.conf

case $ENCRYPTION in
    '1')
        PASSPHRASE=$(whiptail --inputbox "WPA Passphrase for $SSID" 20 70 3>&1 1>&2 2>&3)
        if [ $? -ne 0 ]; then return 0; fi
       CRYPTPASS=$(wpa_passphrase $SSID $PASSPHRASE | grep -v "^#" | grep -v "#psk=")
      PASSERROR="Passphrase must be 8..63 characters"
        if [ "$CRYPTPASS" != "$PASSERROR" ]; then 
        echo "$CRYPTPASS" > $WPANEW
      else
        whiptail --msgbox "ERROR: $PASSERROR" 20 70 1
        return 0;
      fi
    ;;
    '2')
        PASSPHRASE=$(whiptail --inputbox "WEP key (Hex)" 20 70 3>&1 1>&2 2>&3)
        if [ $? -ne 0 ]; then return 0; fi

                  echo "network={
                           ssid=\"$SSID\"
                          key_mgmt=NONE
                            wep_key0=$PASSPHRASE
                            }" > $WPANEW
    ;;
    '3')
        PASSPHRASE=$(whiptail --inputbox "WEP key (ascii)" 20 70 3>&1 1>&2 2>&3)
        if [ $? -ne 0 ]; then return 0; fi

       echo "network={
                   ssid=\"$SSID\"
                   key_mgmt=NONE
                   wep_key0=\"$PASSPHRASE\"
                   }" > $WPANEW
    ;;
    '4')
      echo "network={
                   ssid=\"$SSID\"
                   key_mgmt=NONE
                   }" > $WPANEW
    ;;
esac
# Remove previous matching SSID config first
sudo cat $WPAFILE | perl -00 -pe "s/network=\{[^}]*ssid=\"$SSID\"*[^}]*\}//g" > $WPATMP
# append /merge new config at end of config file
cat $WPATMP $WPANEW | sudo tee  $WPAFILE

whiptail --msgbox "Wifi settings updated for SSID: $SSID" 20 60 1

# connect right now ?
#wpa_supplicant -B -i$wifidevice -c $WPAFILE
#dhclient $wifidevice -1 
eLog "SSID: $SSID"
eLog "Encryption: $ENCRYPTION"
eLog "Wpa File: $WPAFILE"
}


ask() {
  read -p "$1" -r < /dev/tty
  echo $REPLY
}

# Get updated package list
eLog "__ Apt-get ________________________________________________________"
execLog sudo apt-get update

# Make sure we using the lastest version of config script
execLog sudo apt-get install -y raspi-config

eLog "__ Wolfram ________________________________________________________"
eLog ""
eLog "I suggest removing the Wolframe engine as it\'s of limited use in IoT"
eLog "projects. It will save about 1/2G of disk space and a *lot* of time"
eLog "during upgrades"


if [[ $(ask "Do you wish to remove Wolframe engine? [y/N] ") =~ ^[Yy]$ ]]
then
#save 1/2G of space
        execLog sudo apt-get -y purge wolfram-engine
else
  eLog "Operation not performed."
fi

eLog "__ Interactive Menus ______________________________________________"
sudo dpkg-reconfigure locales
eLog "Interactive: Update locales."
sudo dpkg-reconfigure tzdata
eLog "Interactive: Update time zone."
sudo dpkg-reconfigure keyboard-configuration
sudo invoke-rc.d keyboard-setup start
eLog "Interactive: Configure keyboard."
splitMemory
eLog "Batch: Memory."
setOverclock
eLog "Batch: Overclock."

eLog "__ Wifi ___________________________________________________________"
if [[ $(ask "Do you wish to support WiFI? [y/N] ") =~ ^[Yy]$ ]]
then

  execLog sudo apt-get install -y wpasupplicant
  if [[ $(ask "Do you wish to configure a WiFI connection now? [y/N] ") =~ ^[Yy]$ ]]
  then
    do_wifi

     sudo ifdown wlan0
    sudo ifup wlan0
  fi
else
  eLog "Operation not performed."
fi

eLog "__ Zero Conf ______________________________________________________"
if [[ $(ask "Do you wish to support Zero Conf Bonjour (recommended)? [y/N] ") =~ ^[Yy]$ ]]
then
  execLog sudo apt-get install -y avahi-daemon avahi-utils
else
  eLog "Operation not performed."
fi



eLog "__ Host Name ______________________________________________________"
oldhostname=$(cat /etc/hostname)
echo
echo It is highly recommended that the hostname is changed to something unique on the network.
echo Later you will have the option to install Zero conf which requires ALL machines to have
echo a unique name. If you can\'t think of anything I suggest something like \<yourName\>pi\<n\> where
echo n is some single digit number. The current hostname is \"$oldhostname\"
echo

if [[ $(ask "Do you wish to change the hostname?[y/N]  ") =~ ^[Yy]$ ]]
then

  read -p  "Please enter the hostname (letters and numbers only) " -r < /dev/tty

  echo $REPLY | sudo tee /etc/hostname > /dev/null

  sudo sed -ie 's/^\(..*\)'$oldhostname'\(.*\)$/\1'$REPLY'\2/' /etc/hosts
  eLog "Hostname: $oldhostname -> $REPLY"
else
  eLog "Operation not performed."
fi


eLog "__ User Name ______________________________________________________"
# Rename the pi user account
eLog ""
eLog "You will now be offered to the chance to change the user name of the current user account"
eLog "from $USER to something of your own choosing"
eLog "N.B. If this process fails you will probably have to re-image your SD card"
eLog ""

if [[ $(ask "Do you wish to rename the $USER user account?[y/N] ") =~ ^[Yy]$ ]]
then

    read -p  "Please enter the new user name " -r < /dev/tty

cat <<'EOF' | sudo bash -s $USER $REPLY $HOME
     for i in /etc/group /etc/passwd /etc/sudoers /etc/shadow ; do 
          sed -rie '/\b'$1'\b/s/\b'$1'\b/'$2'/g' $i
     done
     mv $3 /home/$2
EOF

    USER=$REPLY
    export LOG_FILE="/home/$USER/$UPDATE_LABEL.log" # renew logfile location

    eLog "User name changed to: $USER"
    eLog ""
else
  eLog "Operation not performed."
fi

eLog "If all has gone well you will be able to access this device using ssh $USER@$(cat /etc/hostname).local"
eLog "assuming you have installed Avahi Zero Conf above"

eLog "__ Expand FS ______________________________________________________"
eLog "Generally you now want to resize the default image size to occupy the whole of your SD card,"
eLog "unless you want to archive this image for re-use later"

if [[ ! $(ask "Do you wish to expand the file system to occupy the whole SD card?[Y/n] ") =~ ^[Nn]$ ]]
then
  #Expand the rootfs
  sudo raspi-config --expand-rootfs
fi

eLog "System will now reboot. Afterwards please login as $USER and run the command"
eLog "wget -O - http://tinyurl.com/RasPiIoT-2 | bash"
read -p "Press any key to continue " -n 1 -r < /dev/tty
execLog sudo init 6
